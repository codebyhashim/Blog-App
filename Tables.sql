--Sql server
-- ASP.NET Identity Default Tables
-- ==========================
-- Note: These are auto-generated by Identity migrations, but I'll show the core User table
CREATE TABLE AspNetUsers (
    Id NVARCHAR(450) NOT NULL PRIMARY KEY,
    UserName NVARCHAR(256) NULL,
    NormalizedUserName NVARCHAR(256) NULL,
    Email NVARCHAR(256) NULL,
    NormalizedEmail NVARCHAR(256) NULL,
    EmailConfirmed BIT NOT NULL DEFAULT 0,
    PasswordHash NVARCHAR(MAX) NULL,
    SecurityStamp NVARCHAR(MAX) NULL,
    ConcurrencyStamp NVARCHAR(MAX) NULL,
    PhoneNumber NVARCHAR(MAX) NULL,
    PhoneNumberConfirmed BIT NOT NULL DEFAULT 0,
    TwoFactorEnabled BIT NOT NULL DEFAULT 0,
    LockoutEnd DATETIMEOFFSET NULL,
    LockoutEnabled BIT NOT NULL DEFAULT 0,
    AccessFailedCount INT NOT NULL DEFAULT 0
);

-- ==========================
-- Categories
-- ==========================
CREATE TABLE Categories (
    CategoryId INT IDENTITY(1,1) PRIMARY KEY,
    Name NVARCHAR(200) NOT NULL,
    CreatedAt DATETIME2 NOT NULL DEFAULT GETDATE()
);

-- ==========================
-- BlogPosts
-- ==========================
CREATE TABLE BlogPosts (
    BlogPostId INT IDENTITY(1,1) PRIMARY KEY,
    Title NVARCHAR(200) NOT NULL,
    Content NVARCHAR(MAX) NOT NULL,
    ImageUrl NVARCHAR(500),
    UserId NVARCHAR(450) NOT NULL,           -- FK -> AspNetUsers
    CategoryId INT NULL,                      -- FK -> Categories
    Status INT NOT NULL DEFAULT 1,            -- 1=Draft, 2=Published
    CreatedAt DATETIME2 NOT NULL DEFAULT GETDATE(),
    UpdatedAt DATETIME2 NULL,
    IsDeleted BIT NOT NULL DEFAULT 0,

    CONSTRAINT FK_BlogPosts_Users FOREIGN KEY (UserId) REFERENCES AspNetUsers(Id),
    CONSTRAINT FK_BlogPosts_Categories FOREIGN KEY (CategoryId) REFERENCES Categories(CategoryId)
);
-- ==========================
-- Comments
-- ==========================
CREATE TABLE Comments (
    CommentId INT IDENTITY(1,1) PRIMARY KEY,
    Content NVARCHAR(MAX) NOT NULL,
    BlogPostId INT NOT NULL,
    UserId NVARCHAR(450) NOT NULL,
    CreatedAt DATETIME2 NOT NULL DEFAULT GETDATE(),
    IsDeleted BIT NOT NULL DEFAULT 0,

    CONSTRAINT FK_Comments_BlogPosts FOREIGN KEY (BlogPostId) REFERENCES BlogPosts(BlogPostId),
    CONSTRAINT FK_Comments_Users FOREIGN KEY (UserId) REFERENCES AspNetUsers(Id)
);

-- ==========================
-- Tags
-- ==========================
CREATE TABLE Tags (
    TagId INT IDENTITY(1,1) PRIMARY KEY,
    Name NVARCHAR(100) NOT NULL
);

-- ==========================
-- BlogPostTags (Many-to-Many)
-- ==========================
CREATE TABLE BlogPostTags (
    BlogPostId INT NOT NULL,
    TagId INT NOT NULL,
    PRIMARY KEY (BlogPostId, TagId),
    CONSTRAINT FK_BlogPostTags_BlogPosts FOREIGN KEY (BlogPostId) REFERENCES BlogPosts(BlogPostId),
    CONSTRAINT FK_BlogPostTags_Tags FOREIGN KEY (TagId) REFERENCES Tags(TagId)
);

-- ==========================
-- Likes (Many-to-Many)
-- ==========================
CREATE TABLE Likes (
    BlogPostId INT NOT NULL,
    UserId NVARCHAR(450) NOT NULL,
    ReactionType INT NOT NULL, -- 1 = Like, 2 = Dislike
    CreatedAt DATETIME2 NOT NULL DEFAULT GETDATE(),
    PRIMARY KEY (BlogPostId, UserId),
    FOREIGN KEY (BlogPostId) REFERENCES BlogPosts(BlogPostId),
    FOREIGN KEY (UserId) REFERENCES AspNetUsers(Id)
);


--Blog App – API Endpoints with Roles
--________________________________________
--1. User Module (Auth & Profile)
--Action	Endpoint	Method	Roles Allowed
--Register Author	/api/auth/register	POST	Anyone
--Login	/api/auth/login	POST	Anyone
--Get Current User Profile	/api/users/me	GET	Author, Admin
--Update Profile	/api/users/me	PUT	Author, Admin
--Get All Users	/api/users	GET	Admin only
--Get User by Id	/api/users/{id}	GET	Admin only
--Delete User	/api/users/{id}	DELETE	Admin only
--Notes:
--•	Readers can browse posts without signup.
--•	Authors/Admins use Identity-based accounts.
--________________________________________
--2. Blog Post Module
--Action	Endpoint	Method	Roles Allowed
--Get All Published Posts	/api/posts	GET	Anyone (Reader, Author, Admin)
--Get Post by Id	/api/posts/{id}	GET	Anyone
--Get Posts by Author	/api/posts/author/{authorId}	GET	Author (own posts), Admin, Reader (view only)
--Create Post	/api/posts	POST	Author, Admin
--Update Post	/api/posts/{id}	PUT	Author (own posts), Admin
--Delete Post	/api/posts/{id}	DELETE	Author (own posts), Admin
--Get Draft Posts	/api/posts/drafts	GET	Author (own drafts), Admin
--Search Posts	/api/posts/search?query=xyz	GET	Anyone
--Filter by Category	/api/posts/category/{categoryId}	GET	Anyone
--Filter by Tag	/api/posts/tag/{tagId}	GET	Anyone
--Notes:
--•	Only Published posts visible to readers.
--•	Authors can manage only their own posts.
--•	Admin can manage all posts.
--________________________________________
--3. Category Module
--Action	Endpoint	Method	Roles Allowed
--Get All Categories	/api/categories	GET	Anyone
--Get Category by Id	/api/categories/{id}	GET	Anyone
--Create Category	/api/categories	POST	Admin only
--Update Category	/api/categories/{id}	PUT	Admin only
--Delete Category	/api/categories/{id}	DELETE	Admin only
--________________________________________
--4. Tag Module
--Action	Endpoint	Method	Roles Allowed
--Get All Tags	/api/tags	GET	Anyone
--Get Tag by Id	/api/tags/{id}	GET	Anyone
--Create Tag	/api/tags	POST	Admin only
--Update Tag	/api/tags/{id}	PUT	Admin only
--Delete Tag	/api/tags/{id}	DELETE	Admin only
--________________________________________
--5. Like / Reaction Module (Optional)
--Action	Endpoint	Method	Roles Allowed
--Like Post	/api/posts/{postId}/like	POST	Author, Reader
--Unlike Post	/api/posts/{postId}/like	DELETE	Author, Reader
--Get Likes for Post	/api/posts/{postId}/likes	GET	Anyone
--________________________________________
--6. Search & Filter Module
--Action	Endpoint	Method	Roles Allowed
--Search Posts by Title/Content	/api/posts/search?query=xyz	GET	Anyone
--Filter Posts by Category	/api/posts/category/{categoryId}	GET	Anyone
--Filter Posts by Tag	/api/posts/tag/{tagId}	GET	Anyone
--________________________________________
--7. Admin Dashboard (Optional Endpoints)
--Action	Endpoint	Method	Roles Allowed
--View Post Statistics	/api/admin/stats/posts	GET	Admin only
--View User Statistics	/api/admin/stats/users	GET	Admin only
--View Like/Reaction Statistics	/api/admin/stats/likes	GET	Admin only
--________________________________________
--🔹 Author Dashboard Statistics (Author-Specific)
--Action	Endpoint	Method	Roles Allowed
--View My Post Statistics (draft vs published count)	/api/author/stats/posts	GET	Author
--View My Likes/Reactions Statistics	/api/author/stats/likes	GET	Author



--Role Summary
--Role	Permissions
--Reader	View published posts, categories, tags, search/filter posts, like posts
--Author	Manage own posts (create/edit/delete), view drafts, view categories/tags, like posts
--Admin	Full control: manage all posts, categories, tags, users, view all stats
--________________________________________
--✅ Total Endpoints (Current Version)
--•	Users/Auth: 7
--•	Posts: 10
--•	Categories: 5
--•	Tags: 5
--•	Likes: 3 (optional)
--•	Search/Filter: 3
--•	Admin Stats: 3 (optional)
--≈ 38 endpoints in total (without comments module)
